package com.brisco.BridgeCalculatorPro.Contract;

import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.util.AttributeSet;
import android.view.View;
import android.widget.TextView;

import com.brisco.BridgeCalculatorPro.R;
import com.brisco.common.Game.Board;
import com.brisco.common.Game.Direction;
import com.brisco.common.Game.Vulnerability;

public class VulnerabilityView extends View {
	Paint paint = new Paint();
	Direction _dealer;
	Vulnerability _vulnerability;
	int _boardNumber;

	public void setBoardNumber(int boardNumber) {
		_boardNumber = boardNumber;
		_dealer = Board.GetDealer(boardNumber);
		_vulnerability = Board.GetVulnerability(boardNumber);
		invalidate();
	}

	public VulnerabilityView(Context context) {
		super(context);
	}

	public VulnerabilityView(Context context, AttributeSet attrs) {
		super(context, attrs);
	}

	@Override
	protected void onDraw(Canvas canvas) {
		super.onDraw(canvas);
		Context context = this.getContext();
		TextView tv = new TextView(context);
		ColorStateList csl = tv.getTextColors();

		paint.setColor(csl.getDefaultColor());
		paint.setStyle(Style.STROKE);
		paint.setTextAlign(Paint.Align.CENTER);
		paint.setAntiAlias(true);

		paint.setTextSize(tv.getTextSize() / (float) 1.2);
		int height = getHeight();
		int width = getWidth();
		float textHeight = paint.getTextSize();
		float textOffset = (textHeight / 2) - 2;

		// float radius = offsetY;
		float radius = textHeight - (textHeight / 4);

		// float offsetX = width / 10;
		// float offsetY = height / 10;
		float offsetX = radius;
		float offsetY = radius;

		float left = offsetX;
		float right = width - offsetX;
		float top = offsetY;
		float bottom = height - offsetY;

		// North
		float centerX = width / 2;
		float centerY = height / 2;

		// Draw rectangle with "holes" for letters
		canvas.drawLine(left, top, centerX - radius, top, paint);
		canvas.drawLine(left, top, left, centerY - radius, paint);

		canvas.drawLine(right, top, centerX + radius, top, paint);
		canvas.drawLine(right, top, right, centerY - radius, paint);

		canvas.drawLine(right, bottom, right, centerY + radius, paint);
		canvas.drawLine(right, bottom, centerX + radius, bottom, paint);

		canvas.drawLine(left, bottom, centerX - radius, bottom, paint);
		canvas.drawLine(left, bottom, left, centerY + radius, paint);

		// Draw letter and circle around dealer
		DrawCircle(canvas, centerX, top, radius, Direction.North);
		canvas.drawText(context.getString(R.string.shortNorth), centerX, top
				+ textOffset, paint);

		// South
		DrawCircle(canvas, centerX, bottom, radius, Direction.South);
		canvas.drawText(context.getString(R.string.shortSouth), centerX, bottom
				+ textOffset, paint);

		// West
		DrawCircle(canvas, left, centerY, radius, Direction.West);
		canvas.drawText(context.getString(R.string.shortWest), offsetX, centerY
				+ textOffset, paint);

		// East
		DrawCircle(canvas, right, centerY, radius, Direction.East);
		canvas.drawText(context.getString(R.string.shortEast), right, centerY
				+ textOffset, paint);

		// Draw lines for Vulnerability
		if (_vulnerability != null) {
			if (_vulnerability.IsVulnerable(Direction.North)) {
				canvas.drawLine(centerX, top + radius, centerX,
						bottom - radius, paint);
			}
			if (_vulnerability.IsVulnerable(Direction.West)) {
				canvas.drawLine(left + radius, centerY, right - radius,
						centerY, paint);
			}
		}
	}

	private void DrawCircle(Canvas canvas, float centerX, float centerY,
			float radius, Direction direction) {
		if (_dealer == direction) {
			canvas.drawCircle(centerX, centerY, radius, paint);
		}
	}
}
